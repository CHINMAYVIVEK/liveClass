version: '3.8'

services:
  api:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    env_file:
      - .env
    # environment:
    #   - LIVECLASS_ENVIRONMENT=production
    #   - LIVECLASS_SERVER_PORT=8080
    #   - LIVECLASS_DATABASE_HOST=db
    #   - LIVECLASS_DATABASE_PORT=5432
    #   - LIVECLASS_DATABASE_USER=postgres
    #   - LIVECLASS_DATABASE_PASSWORD=postgres
    #   - LIVECLASS_DATABASE_NAME=liveclass
    #   - LIVECLASS_DATABASE_SSLMODE=disable
    #   - LIVECLASS_LOGGING_LEVEL=info
    # depends_on:
    #   - db
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

#   db:
#     image: postgres:13-alpine
#     environment:
#       - POSTGRES_USER=postgres
#       - POSTGRES_PASSWORD=postgres
#       - POSTGRES_DB=liveclass
#     ports:
#       - "5432:5432"
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#       - ./migrations/init.sql:/docker-entrypoint-initdb.d/init.sql
#     networks:
#       - app-network
#     restart: unless-stopped
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U postgres"]
#       interval: 10s
#       timeout: 5s
#       retries: 5

#   redis:
#     image: redis:alpine
#     ports:
#       - "6379:6379"
#     networks:
#       - app-network
#     restart: unless-stopped
#     healthcheck:
#       test: ["CMD", "redis-cli", "ping"]
#       interval: 10s
#       timeout: 5s
#       retries: 5

# volumes:
#   postgres_data:

networks:
  app-network:
    driver: bridge
